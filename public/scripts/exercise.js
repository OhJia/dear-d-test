/*
- app
	- header
	  - title
	- body
	  - comment box
	- footer
	  - comment forms
*/

var Comment = React.createClass({
	render: function() {
		return (
			<div className="comment">
				<h2 className="commentId">
					{this.props.id}
				</h2>
				{this.props.children}
			</div>
		)
	}
});


var CommentList = React.createClass({

	componentDidUpdate : function(props, states, context) {
	  if (this.props.data && props.data && this.props.data.length != props.data.length) {
		var last_comment_el = $('.comment').eq(this.props.data.length - 1).get( 0 );
		var pos = this.getPosition(last_comment_el);
		window.scrollTo(0,pos.y);
	  }
	},
	getPosition : function(element) {
	    var xPosition = 0;
	    var yPosition = 0;
	  
	    while(element) {
	        xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
	        yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
	        element = element.offsetParent;
	    }
	    return { x: xPosition, y: yPosition };
	},
	render: function() {
		var commentNodes = this.props.data.map(function(comment){
			return (
				<Comment key={comment.id}>
					{comment.text}
				</Comment>
			);
		});
		
		return (
			<div className="commentList" id="commentList">
				{commentNodes}
			</div>
		);
	}
});

var CommentForm = React.createClass({
	getInitialState: function() {
		return {text: ''};
	},
	handleTextChange: function(e) {
		this.setState({text: e.target.value});
	},
	handleSubmit: function(e) {
		e.preventDefault();
		var text = this.state.text.trim();
		if (!text) {
			return;
		}
		this.props.onCommentSubmit({text: text});
		this.setState({text: ''});

		var elem = document.getElementById('commentList');
  		elem.scrollTop = elem.scrollHeight;
	},
	render: function() {
		return (
			<form className="commentForm" onSubmit={this.handleSubmit}>
				<textarea className="form-control" type="text" 
				  placeholder="Say something... " 
				  value={this.state.text}
				  onChange={this.handleTextChange} />
				<input type="submit" value="Post" />
			</form>
		)
	}
});

// <input type="text" 
// placeholder="Say something... " 
// value={this.state.text}
// onChange={this.handleTextChange} />


var App = React.createClass({
	getCommentsFromServer: function() {
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			cache: false,
			success: function(data){
				this.setState({data:data});
			}.bind(this),
			error: function(ehx, status, err) {
				console.log(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	handleCommentSubmit: function(comment) {
		var comments = this.state.data;
	    // Optimistically set an id on the new comment. It will be replaced by an
	    // id generated by the server. In a production application you would likely
	    // not use Date.now() for this and would have a more robust system in place.
	    comment.id = Date.now();
	    var newComments = comments.concat([comment]);
	    this.setState({data: newComments});
		$.ajax({
			url: this.props.url,
			dataType: 'json',
			type: 'POST',
			data: comment,
			success: function(data){
				this.setState({data:data});
			}.bind(this),
			error: function(ehx, status, err) {
				console.log(this.props.url, status, err.toString());
			}.bind(this)
		});
	},
	getInitialState: function() {
		return {data:[]};
	}, 
	componentDidMount: function() {
		this.getCommentsFromServer();
		setInterval(this.getCommentsFromServer, this.props.pollInterval);
	},
	render: function() {
		return(
		<div className="container">
			<header>
				<h1>Diary Bot</h1>
			</header>
			<CommentList data={this.state.data}/> {/* pass data to CommentList*/}
			<footer>
				<div className="container">
					<CommentForm onCommentSubmit={this.handleCommentSubmit} />
				</div>
			</footer>
		</div>
		);
	}
});


ReactDOM.render(
 	<App url="/api/comments" pollInterval={2000} />,
 	document.getElementById('content')
);

